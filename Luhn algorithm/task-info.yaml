type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/BankAccount.java
  visible: true
  text: |
    package banking;

    import java.util.Random;

    public class BankAccount {
        private String name;
        private long accountNumber;
        private long balance;
        private final Random random = new Random();

        public BankAccount() {
            this.name = " ";
            this.balance = 0;
            this.accountNumber = generateAccountNumber();
        }

        public BankAccount(long initialBalance, String name) {
            this.balance = initialBalance;
            this.name = name;
            this.accountNumber = generateAccountNumber();
        }

        private long generateAccountNumber() {
            String substring = String.format("%09d", random.nextInt(1000000000));
            return Long.parseLong(substring);
        }

        public void withdraw(long amount) {
            if (amount <= balance) {
                balance -= amount;
            } else {
                System.out.println("Insufficient funds");
            }
        }

        public void deposit(long amount) {
            balance += amount;
        }

        public long getBalance() {
            return balance;
        }

        public long getAccountNumber() {
            return accountNumber;
        }
    }
  learner_created: true
- name: src/banking/CreditCard.java
  visible: true
  text: |
    package banking;

    import java.util.Random;

    public class CreditCard {
        private String cardNumber;
        private String cardPin;
        private final int BIN = 400000;
        private BankAccount bankAccount;
        private final Random random = new Random();

        public CreditCard() {
            this.bankAccount = new BankAccount();
            this.cardNumber = Integer.toString(BIN) + bankAccount.getAccountNumber() + 5;
            this.cardPin = generateRandomPin();
        }

        private String generateRandomPin() {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                int randomNum = random.nextInt(10);
                while (i == 0 && randomNum == 0) {
                    randomNum = random.nextInt(10);
                }
                sb.append(randomNum);

            }
            return sb.toString();
        }

        @Override
        public String toString() {
            return "Your card number:\n" + this.cardNumber + "\n" +
                    "Your card PIN:\n" + this.cardPin + "\n";
        }

        public String getCardPin() {
            return cardPin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public long getBalance() {
            return bankAccount.getBalance();
        }
    }
  learner_created: true
- name: src/banking/UserInterface.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class TellerSystem {
        final List<CreditCard> creditCardList;
        final Scanner scanner = new Scanner(System.in);

        public TellerSystem() {
            this.creditCardList = new ArrayList<>();
        }

        private void printMainMenu() {
            System.out.println("1. Create an account\n" +
                    "2. Log into account\n" +
                    "0. Exit");
        }

        public void processMain() {
            boolean noBreak = true;
            while (noBreak) {
                printMainMenu();
                String choice = scanner.nextLine();
                switch (choice) {
                    case "1":
                        addNewCard();
                        break;
                    case "2":
                        processLogin();
                        break;
                    case "0":
                        noBreak = false;
                        break;
                    default:
                        break;
                }
            }
            System.out.println("\nBye!");
        }

        private void addNewCard() {
            CreditCard card = new CreditCard();
            creditCardList.add(card);
            System.out.println("\nYour card has been created");
            System.out.println(card.toString());
        }

        private void processLogin() {
            System.out.println("\nEnter your card number:");
            String creditCard = scanner.nextLine();
            System.out.println("Enter your PIN:");
            String pin = scanner.nextLine();

            CreditCard userCard = checkCredentials(creditCard, pin);
            if (userCard != null) {
                processUser(userCard);
            }
        }

        private CreditCard checkCredentials(String creditCard, String pin) {
            for (CreditCard card : creditCardList) {
                if (card.getCardNumber().equals(creditCard) && card.getCardPin().equals(pin)) {
                    System.out.println("\nYou have successfully logged in!\n");
                    return card;
                }
            }
            System.out.println("\nWrong card number or PIN!\n");
            return null;
        }

        private void processUser(CreditCard card) {
            boolean noBreak = true;
            while (noBreak) {
                printLogMenu();
                String choice = scanner.nextLine();
                switch (choice) {
                    case "1":
                        System.out.println("\nBalance: " + card.getBalance() + "\n");
                        break;
                    case "2":
                        System.out.println("\nYou have successfully logged out!\n");
                        noBreak = false;
                        break;
                    case "0":
                        noBreak = false;
                        break;
                    default:
                        break;
                }
            }
        }

        private void printLogMenu() {
            System.out.println("1. Balance\n" +
                    "2. Log out\n" +
                    "0. Exit");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 26 Aug 2021 10:28:26 UTC
record: -1
